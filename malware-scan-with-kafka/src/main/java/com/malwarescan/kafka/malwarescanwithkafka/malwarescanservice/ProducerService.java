package com.malwarescan.kafka.malwarescanwithkafka.malwarescanservice;


import com.malwarescan.kafka.malwarescanwithkafka.properties.OutboundTopic;
import com.malwarescan.kafka.malwarescanwithkafka.utils.AppConstants;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Service;

@Service
public class ProducerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProducerService.class);

    @Autowired
    private KafkaTemplate<String, String> kafkaTemplate;
     @Autowired
     private OutboundTopic outboundTopic;
    public boolean sendMessage(String message){
        LOGGER.info(String.format("Check messages sent -> %s", message));

        try {
           final ProducerRecord<String, String> record = new ProducerRecord<String,String>(outboundTopic.getOutboundTopic(), message);
            final SendResult result = (SendResult) kafkaTemplate.send(record).get();
            final RecordMetadata metadata = result.getRecordMetadata();

            LOGGER.info(String.format("Sent record(key=%s value=%s) meta(topic=%s, partition=%d, offset=%d)",
                    record.key(), record.value(), metadata.topic(), metadata.partition(), metadata.offset()));
            kafkaTemplate.send(AppConstants.TOPIC_NAME, message);
            return true;
        } catch (Exception e) {
            String msg = "Error sending message to topic " + outboundTopic.getOutboundTopic();
            LOGGER.error(msg);
            throw new RuntimeException(msg, e);
        }
    }
}
