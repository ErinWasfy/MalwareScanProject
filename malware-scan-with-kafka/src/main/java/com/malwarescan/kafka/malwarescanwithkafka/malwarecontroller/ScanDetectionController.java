package com.malwarescan.kafka.malwarescanwithkafka.malwarecontroller;

import com.malwarescan.kafka.malwarescanwithkafka.authentication.Jwt;
import com.malwarescan.kafka.malwarescanwithkafka.malwarescanservice.ScanCheckService;
import com.malwarescan.kafka.malwarescanwithkafka.model.CheckResultEvent;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;

@RestController
@RequestMapping("/scandocument")
public class ScanDetectionController {
    private final ScanCheckService scanCheckService;
    private final Jwt jwt;

    @Autowired
    public ScanDetectionController(ScanCheckService scanCheckService, Jwt jwt)
    {
        this.scanCheckService=scanCheckService;
        this.jwt=jwt;
    }

    @GetMapping("/checkdoc")
    public ResponseEntity<String> checkDocument(@RequestParam("url") String urlDoc) throws IOException {
        if(authenticated()!=null || !authenticated().isEmpty())
        {
            CheckResultEvent result =scanCheckService.isFileInfected(urlDoc);
            if(result.getState().equals(CheckResultEvent.StateEnum.OK))
                return new ResponseEntity<String>("Check process is complete with token: "+authenticated(),HttpStatus.OK);
        }
        return new ResponseEntity<String>("Unable to check this document.Authentication failed.",HttpStatus.FORBIDDEN);
    }

    private String authenticated()
    {
        String token = jwt.createToken();
        if(token!=null || !token.isEmpty())
            return token;
        return "";
    }
}
